generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PGSQL_URL")
}

enum TP_ID {
  hubspot
  zohocrm
  sfdc
  pipedrive
  closecrm
  ms_dynamics_365_sales
  slack
  discord
  linear
  clickup
  asana
  trello
  jira
  bitbucket
}

enum ENV {
  development
  production
}

model accounts {
  id                        String                     @id
  tenant_count              Int?                       @default(0)
  private_token             String                     @unique
  public_token              String                     @unique
  domain                    String                     @unique @default("")
  skipWaitlist              Boolean                    @default(true)
  workspaceName             String?
  users                     users[]
  environments              environments[]
  accountFieldMappingConfig accountFieldMappingConfig?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @default(now()) @updatedAt
}

model environments {
  id            String        @id
  env           ENV
  private_token String        @unique
  public_token  String        @unique
  accounts      accounts?     @relation(fields: [accountId], references: [id])
  accountId     String
  apps          apps[]
  connections   connections[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
}

model apps {
  id                         String        @id
  tp_id                      TP_ID
  scope                      String[]
  app_client_id              String?
  app_client_secret          String?
  owner_account_public_token String?
  app_config                 Json?
  environmentId              String
  env                        environments  @relation(fields: [environmentId], references: [id])
  connections                connections[]
  is_revert_app              Boolean       @default(false)
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @default(now()) @updatedAt
}

model users {
  id        String   @id
  domain    String
  email     String
  accountId String
  account   accounts @relation(fields: [accountId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model connections {
  id                         String          @id @default(uuid())
  tp_id                      TP_ID
  tp_access_token            String
  tp_refresh_token           String?
  tp_customer_id             String
  t_id                       String
  tp_account_url             String?
  owner_account_public_token String
  app_client_id              String?
  app_client_secret          String?
  app_config                 Json?
  app                        apps?           @relation(fields: [appId], references: [id])
  appId                      String?
  schema_mapping_id          String?
  schema_mapping             schema_mapping? @relation(fields: [schema_mapping_id], references: [id])
  environemnt                environments?   @relation(fields: [environmentId], references: [id])
  environmentId              String?
  createdAt                  DateTime        @default(now())
  updatedAt                  DateTime        @default(now()) @updatedAt

  @@unique([tp_customer_id, t_id], name: "uniqueCustomerPerTenant")
  @@unique([t_id, environmentId], name: "uniqueTenantPerEnvironment")
  @@unique([tp_id, t_id, environmentId], name: "uniqueThirdPartyPerTenantPerEnvironment")
  @@unique([tp_customer_id, t_id, tp_id], name: "uniqueCustomerPerTenantPerThirdParty")
}

model schema_mapping {
  id                String        @id
  object_schema_ids String[]
  object_schemas    schemas[]
  connections       connections[] // TODO: can make this single to enforce one-on-one relationship (set schema_mapping_id on connections unique)
}

model schemas {
  id                 String          @id
  fields             String[]
  object             String
  schema_mapping_id  String
  schema_mapping     schema_mapping  @relation(fields: [schema_mapping_id], references: [id], onDelete: Cascade)
  fields_mapping_ids String[]
  fieldMappings      fieldMappings[]
}

model fieldMappings {
  id                String  @id
  source_tp_id      TP_ID
  source_field_name String?
  target_field_name String
  is_standard_field Boolean
  schema_id         String
  schema            schemas @relation(fields: [schema_id], references: [id], onDelete: Cascade)
}

model waitlist {
  email String @id
}

model accountFieldMappingConfig {
  id                                      String   @id @default(uuid())
  account_id                              String   @unique
  account                                 accounts @relation(fields: [account_id], references: [id])
  allow_connection_override_custom_fields Boolean  @default(true)
  mappable_by_connection_field_list       Json? // [{ objectName, fieldName }]
}

model telemetry {
  id        String   @id @default(uuid())
  metadata  Json? // CreateTelemetryEntryRequest in telemetry.yml
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
